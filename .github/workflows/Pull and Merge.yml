name: Feature to Dev Pull Request Workflow

on:
  push:
    branches:
      - 'feature/*'  # Triggers on pushes to feature/* branches

jobs:
  # Job to create a pull request from feature branches to the Dev branch
  pr-creation:
    name: Create Pull Request
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Create Pull Request
      - name: Create Pull Request
        run: |
          # Extract the branch name from the full reference
          branch_name="${{ github.head_ref }}"

          # Define the PR title
          pr_title="Feature changes from $branch_name"

          # Define the base branch (target branch for the pull request)
          base_branch="Dev"

          # Define the GitHub API endpoint for creating a pull request
          api_url="https://api.github.com/repos/${{ github.repository }}/pulls"

          # Create a pull request using the GitHub API
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -d "{\"title\":\"$pr_title\",\"head\":\"$branch_name\",\"base\":\"$base_branch\"}" \
            "$api_url"

  # Job to build the project after PR creation
  build-project:
    name: Build Project
    runs-on: ubuntu-latest
    needs: pr-creation  # Task 2 depends on Task 1
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      # Step 3: Install Salesforce CLI
      - name: Install Salesforce CLI
        uses: sfdx-actions/setup-sfdx@v1

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 5: Build the project
      - name: Build project
        run: npm run build

  # Job to check merge conflicts for pull requests
  check-merge-conflicts:
    name: Check Merge Conflicts
    runs-on: ubuntu-latest
    needs: pr-creation  # Task 3 depends on Task 1
    steps:
      # Step 1: Checkout the PR branch
      - name: Checkout PR branch
        uses: actions/checkout@v3
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      # Step 2: Check for merge conflicts
      - name: Check for merge conflicts
        run: |
          # Fetch the target branch
          git fetch origin ${{ github.event.pull_request.base.ref }}
          # Try merging the PR branch into the target branch
          git merge --no-commit --no-ff origin/${{ github.event.pull_request.base.ref }}
          # Check the merge conflict status
          if git ls-files --unmerged | grep -q '.'; then
            echo "Merge conflicts found."
            echo "::set-output name=conflicts::true"
          else
            echo "No merge conflicts found."
            echo "::set-output name=conflicts::false"

      # Step 3: Post a comment on the PR if there are conflicts
      - name: Post comment if conflicts found
        if: github.event_name == 'pull_request' && steps.check-for-conflicts.outputs.conflicts == 'true'
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          COMMENT=":warning: **Merge conflicts found in this PR!**\n\nPlease resolve the conflicts before merging."
          # Post a comment on the PR using the GitHub API
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$COMMENT\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments"
